/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.manageme;

import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author rhjvirta
 */
public class desktopUI extends javax.swing.JFrame {
    
    private static final String NUMBERS = "[0-9]*";
    
    private static final List<Bank> banks;
    private static final List<BonusCard> bonusCards;

    static {
        banks = new ArrayList<Bank>();

        final Bank bankOne = new Bank(0, "Bank One");
        final Map<String, Double> bankOneSixMonths = new HashMap<String, Double>();
        bankOneSixMonths.put(Bank.INTEREST_RATE, 1D);
        bankOneSixMonths.put(Bank.OPENING_FEE, 10D);
        bankOneSixMonths.put(Bank.TRANSACTION_FEE, 4D);
        bankOne.valueMap.put(6, bankOneSixMonths);
        final Map<String, Double> bankOneNineMonths = new HashMap<String, Double>();
        bankOneNineMonths.put(Bank.INTEREST_RATE, 3D);
        bankOneNineMonths.put(Bank.OPENING_FEE, 20D);
        bankOneNineMonths.put(Bank.TRANSACTION_FEE, 5D);
        bankOne.valueMap.put(9, bankOneNineMonths);
        final Map<String, Double> bankOneTwelveMonths = new HashMap<String, Double>();
        bankOneTwelveMonths.put(Bank.INTEREST_RATE, 4D);
        bankOneTwelveMonths.put(Bank.OPENING_FEE, 30D);
        bankOneTwelveMonths.put(Bank.TRANSACTION_FEE, 6D);
        bankOne.valueMap.put(12, bankOneTwelveMonths);
        banks.add(bankOne);

        final Bank bankTwo = new Bank(1, "Bank Two");
        final Map<String, Double> bankTwoSixMonths = new HashMap<String, Double>();
        bankTwoSixMonths.put(Bank.INTEREST_RATE, 5D);
        bankTwoSixMonths.put(Bank.OPENING_FEE, 50D);
        bankTwoSixMonths.put(Bank.TRANSACTION_FEE, 1D);
        bankTwo.valueMap.put(6, bankTwoSixMonths);
        final Map<String, Double> bankTwoNineMonths = new HashMap<String, Double>();
        bankTwoNineMonths.put(Bank.INTEREST_RATE, 7D);
        bankTwoNineMonths.put(Bank.OPENING_FEE, 10D);
        bankTwoNineMonths.put(Bank.TRANSACTION_FEE, 3D);
        bankTwo.valueMap.put(9, bankTwoNineMonths);
        final Map<String, Double> bankTwoTwelveMonths = new HashMap<String, Double>();
        bankTwoTwelveMonths.put(Bank.INTEREST_RATE, 6D);
        bankTwoTwelveMonths.put(Bank.OPENING_FEE, 30D);
        bankTwoTwelveMonths.put(Bank.TRANSACTION_FEE, 5D);
        bankTwo.valueMap.put(12, bankTwoTwelveMonths);
        banks.add(bankTwo);

        Collections.sort(banks);

        bonusCards = new ArrayList<BonusCard>();

        final BonusCard bonusCardOne = new BonusCard(0, "Bonus Card One", 3);
        bonusCards.add(bonusCardOne);
        final BonusCard bonusCardTwo = new BonusCard(1, "Bonus Card Two", 5);
        bonusCards.add(bonusCardTwo);
        Collections.sort(bonusCards);

    }
    
    private final String formatAmount(final Object amountObject) {
        final DecimalFormat df =
                new DecimalFormat( "#,###,###,###,###,###,###,###,##0.00" );
        if (amountObject instanceof String) {
            if (!((String) amountObject).matches(NUMBERS)) {
                return "0.00";
            }
            return df.format(Long.parseLong((String) amountObject));
        } else if (amountObject instanceof Long) {
            return df.format((Long) amountObject);
        } else {
            return df.format((Double) amountObject);
        }
    }
    
    private final long parseLong (String value) {
        if (value == null || value.length() == 0) {
            return 0L;
        } else {
            return Long.parseLong(value);
        }
    }

    /**
     * Creates new form desktopUI
     */
    public desktopUI() {
        initComponents();
        for (Bank bank : banks) {
            bankInput.addItem(bank.name);
        }
        resultsPanel.setVisible(false);
        getContentPane().setMaximumSize(new Dimension(650, 410));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        fillDetailsTitle = new javax.swing.JLabel();
        fillDetailsSubTitle = new javax.swing.JLabel();
        loanAmountLabel = new javax.swing.JLabel();
        loanAmountInput = new javax.swing.JTextField();
        bankLabel = new javax.swing.JLabel();
        bankInput = new javax.swing.JComboBox();
        bankAccountBalanceLabel = new javax.swing.JLabel();
        creditCardBalanceLabel = new javax.swing.JLabel();
        regularIncomeLabel = new javax.swing.JLabel();
        regularBillsLabel = new javax.swing.JLabel();
        bankAccountBalanceInput = new javax.swing.JTextField();
        creditCardBalanceInput = new javax.swing.JTextField();
        regularIncomeInput = new javax.swing.JTextField();
        regularBillsInput = new javax.swing.JTextField();
        advancedSettingsButton = new javax.swing.JToggleButton();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        resultTopLabel = new javax.swing.JLabel();
        loanTableCaption = new javax.swing.JLabel();
        loanScrollPane = new javax.swing.JScrollPane();
        loanTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bonusCardTable = new javax.swing.JTable();
        resultSuggestText = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        loanAmountError = new javax.swing.JLabel();
        bankAccountBalanceError = new javax.swing.JLabel();
        creditCardBalanceError = new javax.swing.JLabel();
        regularIncomeError = new javax.swing.JLabel();
        regularBillsError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainTitle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        mainTitle.setText("Welcome to ManageMe!");
        getContentPane().add(mainTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        fillDetailsTitle.setText("Fill details of your loan");
        getContentPane().add(fillDetailsTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, -1, -1));

        fillDetailsSubTitle.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        fillDetailsSubTitle.setText("To fill more detailed information, click Advanced settings");
        getContentPane().add(fillDetailsSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 57, -1, -1));

        loanAmountLabel.setText("Loan amount");
        getContentPane().add(loanAmountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 89, -1, -1));

        loanAmountInput.setToolTipText("Loan amount in Euros");
        getContentPane().add(loanAmountInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 83, 135, -1));

        bankLabel.setText("Bank");
        getContentPane().add(bankLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 127, -1, -1));
        getContentPane().add(bankInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 123, -1, -1));

        bankAccountBalanceLabel.setText("Bank account balance");
        getContentPane().add(bankAccountBalanceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 209, -1, -1));

        creditCardBalanceLabel.setText("Credit card balance");
        getContentPane().add(creditCardBalanceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 249, -1, -1));

        regularIncomeLabel.setText("Regular income");
        getContentPane().add(regularIncomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 289, -1, -1));

        regularBillsLabel.setText("Regular bills");
        getContentPane().add(regularBillsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 329, -1, -1));

        bankAccountBalanceInput.setToolTipText("Your bank account's balance in Euros");
        getContentPane().add(bankAccountBalanceInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 203, 135, -1));

        creditCardBalanceInput.setToolTipText("Your credit card's balance in Euros");
        getContentPane().add(creditCardBalanceInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 243, 135, -1));

        regularIncomeInput.setToolTipText("Your regular income /month in Euros");
        getContentPane().add(regularIncomeInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 283, 135, -1));

        regularBillsInput.setToolTipText("Your regular bills /month in Euros");
        getContentPane().add(regularBillsInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 323, 135, -1));

        advancedSettingsButton.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        advancedSettingsButton.setText("Advanced settings");
        getContentPane().add(advancedSettingsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 162, -1, -1));

        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });
        getContentPane().add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 369, -1, -1));

        resetButton.setText("Reset");
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 369, -1, -1));

        resultTopLabel.setText("resultTopLabel");

        loanTableCaption.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        loanTableCaption.setText("If a caption is needed, it could be here...");

        loanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Duration", "Interest rate", "Opening fee", "Transaction fee", "Monthly payment", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        loanScrollPane.setViewportView(loanTable);

        jLabel1.setText("Bonus cards");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel2.setText("Following table shows how much bonuses you get when buying with the loan amount and using a bonus card");

        bonusCardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Bonus card", "Bonus amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bonusCardTable);

        resultSuggestText.setText("jLabel3");

        org.jdesktop.layout.GroupLayout resultsPanelLayout = new org.jdesktop.layout.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultsPanelLayout.createSequentialGroup()
                .add(resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(resultTopLabel)
                    .add(loanTableCaption)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, loanScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 489, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(resultSuggestText)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1))
                .add(0, 12, Short.MAX_VALUE))
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, resultsPanelLayout.createSequentialGroup()
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(resultSuggestText)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(resultTopLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(loanTableCaption)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(loanScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        getContentPane().add(resultsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 416, -1, 290));

        loanAmountError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(loanAmountError, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 83, -1, -1));

        bankAccountBalanceError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(bankAccountBalanceError, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 203, -1, -1));

        creditCardBalanceError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(creditCardBalanceError, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 243, -1, -1));

        regularIncomeError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(regularIncomeError, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 283, -1, -1));

        regularBillsError.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(regularBillsError, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 323, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        // TODO add your handling code here:
        loanAmountInput.setText("");
        loanAmountError.setText("");
        bankInput.setSelectedIndex(0);
        bankAccountBalanceInput.setText("");
        bankAccountBalanceError.setText("");
        creditCardBalanceInput.setText("");
        creditCardBalanceError.setText("");
        regularBillsInput.setText("");
        regularBillsError.setText("");
        regularIncomeInput.setText("");
        regularIncomeError.setText("");
        resultsPanel.setVisible(false);
    }//GEN-LAST:event_resetButtonMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
        boolean errors = false;
        if (loanAmountInput.getText().equals("")) {
            errors = true;
            loanAmountError.setText("Required");
        } else if (!loanAmountInput.getText().matches(NUMBERS)) {
            errors = true;
            loanAmountError.setText("Invalid value.");
        } else {
            loanAmountError.setText("");
        }
        
        if (!bankAccountBalanceInput.getText().matches(NUMBERS)) {
            errors = true;
            bankAccountBalanceError.setText("Invalid value.");
        } else {
            bankAccountBalanceError.setText("");
        }
        
        if (!creditCardBalanceInput.getText().matches(NUMBERS)) {
            errors = true;
            creditCardBalanceError.setText("Invalid value.");
        } else {
            creditCardBalanceError.setText("");
        }
        
        if (!regularIncomeInput.getText().matches(NUMBERS)) {
            errors = true;
            regularIncomeError.setText("Invalid value.");
        } else {
            regularIncomeError.setText("");
        }
        
        if (!regularBillsInput.getText().matches(NUMBERS)) {
            errors = true;
            regularBillsError.setText("Invalid value.");
        } else {
            regularBillsError.setText("");
        }
        
        if (errors) {
            return;
        }
                
        {
            long inputLoanAmount = parseLong(loanAmountInput.getText());
            final int inputBank = bankInput.getSelectedIndex();
            final long inputRegularIncome = parseLong(regularIncomeInput.getText());
            final long inputRegularBills = parseLong(regularBillsInput.getText());
            final long inputCreditCard = parseLong(creditCardBalanceInput.getText());
            long inputBankAccount = parseLong(bankAccountBalanceInput.getText());
            
            final long originalLoanAmount = inputLoanAmount;

            System.out.println(inputLoanAmount + " " + inputBank + " " + inputRegularIncome + " " + inputRegularBills
                    + " " + inputCreditCard);

            if (inputBankAccount >= inputLoanAmount) {
                inputBankAccount -= inputLoanAmount;
                inputLoanAmount = 0;
                resultSuggestText.setText("Use money on your bank account.");
            } else if (inputBankAccount > 0) {
                inputLoanAmount -= inputBankAccount;
                resultSuggestText.setText("Money on your bank account is not enough, you need to take a loan.");
            } else {
                resultSuggestText.setText("");
            }

            if (inputLoanAmount > 0) {
                resultTopLabel.setText("Loans for amount "
                    + formatAmount(inputLoanAmount) 
                    +  " € from " + bankInput.getSelectedItem());
                resultTopLabel.setVisible(true);
                loanTableCaption.setVisible(true);
                
                final Bank bank = banks.get(inputBank);
                System.out.println("Bank: " + bank.name);
                int i = 0;
                for (Integer key : bank.valueMap.keySet()) {
                    final double rate = bank.valueMap.get(key).get(Bank.INTEREST_RATE) / 100;
                    final double monthlyPayment =
                            (inputLoanAmount / ((1 - Math.pow(1 + (rate / 12.0), -key)) / (rate / 12)))
                            + bank.valueMap.get(key).get(Bank.TRANSACTION_FEE);
                    final double totalPayment = monthlyPayment * (double) key + bank.valueMap.get(key).get(Bank.OPENING_FEE);
                    
                    loanTable.setValueAt(key + " months", i, 0);
                    loanTable.setValueAt(bank.valueMap.get(key).get(Bank.INTEREST_RATE) + " %", i, 1);
                    loanTable.setValueAt(formatAmount(bank.valueMap.get(key).get(Bank.OPENING_FEE)) + " €", i, 2);
                    loanTable.setValueAt(formatAmount(bank.valueMap.get(key).get(Bank.TRANSACTION_FEE)) + " €", i, 3);
                    loanTable.setValueAt(formatAmount(monthlyPayment) + " €", i, 4);
                    loanTable.setValueAt(formatAmount(totalPayment) + " €", i, 5);
                    i++;
                }
                loanScrollPane.setVisible(true);

            } else {
                resultTopLabel.setVisible(false);
                loanScrollPane.setVisible(false);
                loanTableCaption.setVisible(false);
            }

            int i = 0;
            for (BonusCard bonusCard : bonusCards) {
                bonusCardTable.setValueAt(bonusCard.name, i, 0);
                bonusCardTable.setValueAt(
                        formatAmount((originalLoanAmount * (bonusCard.bonusPercentage / 100))), i, 1);
                i++;
            }
        }
        
        resultsPanel.setVisible(true);
    }//GEN-LAST:event_searchButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(desktopUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(desktopUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(desktopUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(desktopUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new desktopUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton advancedSettingsButton;
    private javax.swing.JLabel bankAccountBalanceError;
    private javax.swing.JTextField bankAccountBalanceInput;
    private javax.swing.JLabel bankAccountBalanceLabel;
    private javax.swing.JComboBox bankInput;
    private javax.swing.JLabel bankLabel;
    private javax.swing.JTable bonusCardTable;
    private javax.swing.JLabel creditCardBalanceError;
    private javax.swing.JTextField creditCardBalanceInput;
    private javax.swing.JLabel creditCardBalanceLabel;
    private javax.swing.JLabel fillDetailsSubTitle;
    private javax.swing.JLabel fillDetailsTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel loanAmountError;
    private javax.swing.JTextField loanAmountInput;
    private javax.swing.JLabel loanAmountLabel;
    private javax.swing.JScrollPane loanScrollPane;
    private javax.swing.JTable loanTable;
    private javax.swing.JLabel loanTableCaption;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JLabel regularBillsError;
    private javax.swing.JTextField regularBillsInput;
    private javax.swing.JLabel regularBillsLabel;
    private javax.swing.JLabel regularIncomeError;
    private javax.swing.JTextField regularIncomeInput;
    private javax.swing.JLabel regularIncomeLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel resultSuggestText;
    private javax.swing.JLabel resultTopLabel;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
